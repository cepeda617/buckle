/ Typography ==============================================

.page-header
  h1 Typography

h2 Blockquotes
p Use <code>blockquote_tag</code> for quoting blocks of content from another source within your document.

= panel_tag do
  = panel_body blockquote_tag('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.', cite: 'Someone famous in Source Title')
  = panel_footer code_tag("<%= blockquote_tag 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.', cite: 'Someone famous in Source Title' %\>", :erb)

h4 Alternative display
p Add <code>.pull-right</code> for a floated, right-aligned blockquote.

= panel_tag do
  = panel_body blockquote_tag('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.', cite: 'Someone famous in Source Title', class: 'pull-right')
  = panel_footer code_tag("\<%= blockquote_tag 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.', cite: 'Someone famous in Source Title' %\>", :erb)

/ Code ==============================================

.page-header
  h1 Code

h2 Basic block
p Use <code>code_tag</code> to wrap and highlight lines of code. Be sure to escape any angle brackets in the code for proper rendering.

= panel_tag code_tag('<p>Sample text here...</p>'), footer: code_tag("\<%= code_tag '<p>Sample text here...</p>' %\>", :erb)

p Set the syntax with an additional argument.

= panel_tag do
  = panel_body do
    = code_tag :html do
      h2 Basic block
      p Use <code>code_tag</code> to wrap and highlight lines of code.

  = panel_footer do
    = code_tag :erb do
        | <%= code_tag :html do %>
            <!-- ... -->
          <% end %>

= callout_tag do
  | The <code>code_tag</code> helper uses Coderay for syntax highlighting. Additional passable options are explained here:
  = link_to nil, 'http://coderay.rubychan.de/doc/CodeRay/Encoders/HTML.html'

/ Tables ==============================================

.page-header
  h1 Tables

h2 Basic example
p For basic styling—light padding and only horizontal divider, use the <code>table_for</code> helper.

= panel_tag do
  = panel_body do
    = table_for @style_guide.people_for_table do |t|
      - t.header :id
      - t.header :first_name
      - t.header :last_name
      - t.header :username
      - t.rows.each do |row, person, index|
        - row.id index
        - row.first_name person[0]
        - row.last_name person[1]
        - row.username person[2]
      - t.footer :people_count, "Number of people: #{ @style_guide.people_for_table.count }"

  = panel_footer
    = code_tag :erb do
      | <%= table_for @people do |t|
          t.header :id
          t.header :first_name
          t.header :last_name
          t.header :username

          t.rows.each do |row, person, index|
            row.id index + 1
            row.first_name person[0]
            row.last_name person[1]
            row.username person[2]
          end

          t.footer :people_count, "Number of people: #{ @people }"
        end %>

p You can also use ActiveRecord objects directly to get the same result.

= code_tag :erb do
  | <%= table_for Person.all %>

h2 Striped rows
p Use <code>table_tag :striped</code> to add zebra-striping to any table row within the <code>&lt;tbody&gt;</code>.

= panel_tag do
  = panel_body do

    = table_for @style_guide.people_for_table, :striped do |t|
      - t.header :id
      - t.header :first_name
      - t.header :last_name
      - t.header :username

      - t.rows.each do |row, person, index|
        - row.id index + 1
        - row.first_name person[0]
        - row.last_name person[1]
        - row.username person[2]

      - t.footer :people_count, "Number of people: #{ @style_guide.people_for_table.count }"

  = panel_footer do
    = code_tag :erb do
      |
        <%= table_for @people, :striped do |t|
          # ...
         end %>

h2 Bordered table
p Use <code>table_tag :bordered</code> for borders on all sides of the table and cells.

= panel_tag do
  = panel_body do

    = table_for @style_guide.people_for_table, :bordered do |t|
      - t.header :id
      - t.header :first_name
      - t.header :last_name
      - t.header :username

      - t.rows.each do |row, person, index|
        - row.id index + 1
        - row.first_name person[0]
        - row.last_name person[1]
        - row.username person[2]

      - t.footer :people_count, "Number of people: #{ @style_guide.people_for_table.count }"

  = panel_footer do
    = code_tag :erb do
      |
        <%= table_for @people, :bordered do |t|
          # ...
        end %>

h2 Hover rows
p Use <code>table_tag :hover</code> to enable a hover state on table rows within a <code>&lt;tbody&gt;</code>.

= panel_tag do
  = panel_body do

    = table_for @style_guide.people_for_table, :hover do |t|
      - t.header :id
      - t.header :first_name
      - t.header :last_name
      - t.header :username

      - t.rows.each do |row, person, index|
        - row.id index + 1
        - row.first_name person[0]
        - row.last_name person[1]
        - row.username person[2]

      - t.footer :people_count, "Number of people: #{ @style_guide.people_for_table.count }"

  = panel_footer do
    = code_tag :erb do
      |
        <%= table_for @people, :hover do |t|
          # ...
        end %>

h2 Condensed table
p Use <code>table_tag :condensed</code> to make tables more compact by cutting cell padding in half.

= panel_tag do
  = panel_body do

    = table_for @style_guide.people_for_table, :condensed do |t|
      - t.header :id
      - t.header :first_name
      - t.header :last_name
      - t.header :username

      - t.rows.each do |row, person, index|
        - row.id index + 1
        - row.first_name person[0]
        - row.last_name person[1]
        - row.username person[2]

      - t.footer :people_count, "Number of people: #{ @style_guide.people_for_table.count }"

  = panel_footer do
    = code_tag :erb do
      |
        <%= table_for @people, :condensed do |t|
          # ...
        end %>

h2 Contextual classes
p Use contextual classes to color table rows or individual cells.

= table_for @style_guide.table_contexts do |t|
  - t.header :context
  - t.header :description

  - t.rows.each do |row, context, index|
    - row.context "<code>:#{ context[0] }</code>"
    - row.description context[1]

= panel_tag do
  = panel_body do

    = table_for @style_guide.people_for_table do |t|
      - t.header :id
      - t.header :first_name
      - t.header :last_name
      - t.header :username

      - t.rows.each do |row, person, index|
        - row[:class] = [:success, :warning, :danger][index]
        - row.id index + 1
        - row.first_name person[0]
        - row.last_name person[1]
        - row.username person[2]

      - t.footer :people_count, "Number of people: #{ @style_guide.people_for_table.count }"

  = panel_footer do
    = code_tag :erb do
      |
        <%= table_for @people do |t|
          # ...
          t.rows.each do |row, person, index|
            row[:class] = :success
            # ...
          end
          # ...
        end %>

h2 Responsive tables
p Create responsive tables by including <code>:table-responsive</code> to make them scroll horizontally up to small devices (under 768px). When viewing on anything larger than 768px wide, you will not see any difference in these tables.

= panel_tag do
  = panel_body do

    = table_for @style_guide.people_for_table, :responsive do |t|
      - t.header :id
      - t.header :first_name
      - t.header :last_name
      - t.header :username

      - t.rows.each do |row, person, index|
        - row.id index + 1
        - row.first_name person[0]
        - row.last_name person[1]
        - row.username person[2]

      - t.footer :people_count, "Number of people: #{ @style_guide.people_for_table.count }"

  = panel_footer do
    = code_tag :erb do
      |
        <%= table_for @people, :responsive do |t|
          # ...
        end %>

/ Forms ==============================================

/ Buttons ==============================================

.page-header
  h1 Buttons

h2 Options
p Use any of the available button classes to quickly create a styled button.

= panel_tag do
  = panel_body do
    => btn_tag 'Default'
    => btn_tag :primary, 'Primary'
    => btn_tag :success, 'Success'
    => btn_tag :info, 'Info'
    => btn_tag :warning, 'Warning'
    => btn_tag :danger, 'Danger'
    = btn_tag :link, 'Link'
  = panel_footer do
    = code_tag :erb
      |
        <%= btn_tag 'Default' %>
        <%= btn_tag :primary, 'Primary' %>
        <%= btn_tag :success, 'Success' %>
        <%= btn_tag :info, 'Info' %>
        <%= btn_tag :warning, 'Warning' %>
        <%= btn_tag :danger, 'Danger' %>
        <%= btn_tag :link, 'Link' %>

h2 Sizes
p Fancy larger or smaller buttons? Add <code>:lg</code>, <code>:sm</code>, or <code>:xs</code> for additional sizes.

= panel_tag do
  = panel_body do
    p
      => btn_tag :primary, :lg, 'Large button'
      = btn_tag :lg, 'Large button'
    p
      => btn_tag :primary, 'Default button'
      = btn_tag 'Default button'
    p
      => btn_tag :primary, :sm, 'Small button'
      = btn_tag :sm, 'Small button'

    => btn_tag :primary, :xs, 'Smallest button'
    = btn_tag :xs, 'Smallest button'

  = panel_footer do
    = code_tag :erb do
      |
        <%= btn_tag :primary, :lg, 'Large button' %>
        <%= btn_tag :lg, 'Large button' %>

        <%= btn_tag :primary, 'Default button' %>
        <%= btn_tag 'Default button' %>

        <%= btn_tag :primary, :sm, 'Small button' %>
        <%= btn_tag :sm, 'Small button' %>

        <%= btn_tag :primary, :xs, 'Smallest button' %>
        <%= btn_tag :xs, 'Smallest button' %>

p Create block level buttons—those that span the full width of a parent— by adding <code>:block</code>.

= panel_tag do
  = panel_body do
    p.well style='max-width:400px; margin: 10px auto'
      => btn_tag :primary, :block, :lg, 'Block level button'
      = btn_tag :block, :lg, 'Block level button'

  = panel_footer do
    = code_tag :erb do
      |
        <%= btn_tag :primary, :block, :lg, 'Block level button' %>
        <%= btn_tag :block, :lg, 'Block level button' %>
/ Images ==============================================

/ Helpers ==============================================
